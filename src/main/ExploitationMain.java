package main;

	import ia.Exploitation;

import java.awt.Point;

import lejos.nxt.Button;
import model.Direction;
import model.Grid;
import model.Position;
import bluetooth.BluetoothRobot;
import captors.ExtendedMovement;
import captors.LineDetectors;
import captors.LineObserver;
import captors.WallDetector;
import captors.WallDiscovererObserver;

		
public class ExploitationMain extends AbstractMain{

		public ExploitationMain() {
		}
		
		public void start () {
			this.started = false;
			Position position = new Position(0.5, 0.5, Direction.EAST);
			Grid g = new Grid(5, 23);
			Point destination = new Point(5,10);
			ExtendedMovement move = new ExtendedMovement(position);
			
			BluetoothRobot br = new BluetoothRobot(position, g, this);
			BluetoothRobot.bt = br;
			Thread btThread = new Thread(br);
			btThread.start();
			
			while (!this.started) {
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}/**/
			
			LineDetectors ld = new LineDetectors ();
			Thread ldThread = new Thread (ld);
			ldThread.start ();/**/
			
			WallDetector wd = new WallDetector();
			wd.changeHeadPosition(); // Met vers l'avant
			Thread wdThread = new Thread(wd);
			wdThread.start();/**/
			
			LineObserver lo = new LineObserver(move, position);
			ld.addObserver(lo);

			WallDiscovererObserver wo = new WallDiscovererObserver(g, position, br);
			wd.addObserver(wo);/**/
			

			Exploitation exploit= new Exploitation(position,g,move);
			exploit.solve(destination);
			
			ld.stop();
			wd.stop();
			br.stop();
			
			try {
				btThread.join();
				ldThread.join();
				wdThread.join();
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
			
			if (wd.isInFrontPosition())
				wd.changeHeadPosition();/**/
			
			Button.waitForAnyPress();
		}

		public static void main(String[] args) {
			MainExplorer main = new MainExplorer();
			main.start();
		}

	}

