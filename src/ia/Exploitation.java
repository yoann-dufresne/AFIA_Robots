package ia;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import main.Config;
import model.Direction;
import model.Grid;
import model.Position;
import model.Tile;
import model.WallState;
import ia.IA;


public class Exploitation {

	private int ID;
	private Position position;
	private Grid grid;
	private List<Point> path;
	private Movement movement;
	private boolean error;
	
	public Exploitation(Position position,Grid grid,Movement movement){
		this.position=position;
		this.grid=grid;
		this.movement=movement;
		this.error=false;
		//TODO récupérer un ID par bluetooth
	}
	
	
	public void solve(Point destination){
		//TODO écouter si l'autre robot dit qu'il a un problème
		Point nextPoint= null;
		
		IA ia = new IA(this.position, this.grid);
		Solution sol = ia.goTo(destination.x, destination.y);
		this.getPath(sol);
		
		while (!this.path.isEmpty()){
			//si pb calcul du nouveau chemin
			if (this.error){
				IA ia = new IA(this.position, this.grid);
				Solution sol = ia.goTo(destination.x, destination.y);
				this.getPath(sol);
				this.error=false;
			}
			
			nextPoint = this.path.remove(0);
			this.movement.turn(Direction.getDirectionBetween(this.position.getPoint(), nextPoint));
			this.movement.straightForward();
			
			//si le robot n'arrive pas à la bonne case
			if (!this.position.getPoint().equals(nextPoint)){
				//TODO dire à l'autre robot qu'il y a un problème
				this.error=true;	
			}
		}
	}
	
	
	
	
	//Get the right path according to the ID
	public void getPath(Solution sol){
		if (sol.alonePath != null) {
			if (this.ID==1)
				this.path = sol.alonePath;
			else if (this.ID==2)
				this.path = new ArrayList<Point>();
		} 
		else {
			if (this.ID==1)
				this.path = sol.otherCoopPath;
			else if (this.ID==2)
				this.path = sol.myCoopPath;
		}
	}
}
